<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Form.Info">
<Abstract>1</Abstract>
<IncludeCode>Form</IncludeCode>
<TimeCreated>64090,75344.051371</TimeCreated>

<Method name="getFormsList">
<Description>
Get all forms list
w ##class(Form.Info).getFormsList().$toJSONFormat()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Array</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	set forms = []
	
	set rs = ##class(%ResultSet).%New("%Dictionary.ClassDefinition.SubclassOf")
	set sc = rs.%Execute($$$adaptorClass)
	quit:$$$ISERR(sc) 

	while (rs.%Next(.sc)) {
		quit:$$$ISERR(sc)		
		set className = rs.Data("Name")
		set formName = ..getFormParam(className, $$$formNameParam)
		CONTINUE:formName=""
		set formObj = {"name":formName, "class": className}
		do forms.$push(formObj)
	}
	
	quit forms
]]></Implementation>
</Method>

<Method name="getFormsMetadata">
<Description>
Get all forms metadata
w ##class(Form.Info).getFormsMetadata().$toJSONFormat()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Object</ReturnType>
<Implementation><![CDATA[
	// TODO get form list in runtime for runtime mode
	set forms = {}
	$$$forAll(form, $$$formGlobal)
		do forms.%DispatchSetProperty(form, ..getFormMetadataRuntime(form))
	$$$endFor
	quit forms
]]></Implementation>
</Method>

<Method name="formExists">
<Description>
Check that form with this classname exist</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	return:className="" $$$NO
	return $select($data($$$formGlobal(className))'=0:$$$YES, 1:$$$NO)
]]></Implementation>
</Method>

<Method name="formExistsStatus">
<Description>
Check that form with this classname exist</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	set formExists = ..formExists(className)
	if 'formExists {
		set sc = $$$ERROR($$$GeneralError, "Form '" _ className _ "' does not exist")
	}
	return sc
]]></Implementation>
</Method>

<Method name="getFormMetadata">
<Description>
Get form metadata as JSON</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ##class(Form.Settings).getSetting("metadataget") = "runtime" { 
		set json = ..getFormMetadataRuntime(className).$toJSON()
	} else {
		/// compiletime
		set json = $$$formGlobal(className, $$$metadata)
	}
	
	return json
]]></Implementation>
</Method>

<Method name="getFormMetadataRuntime">
<Description><![CDATA[
Get form metadata at runtime
Equal to generateMetadata method from Form.Generators class, 
but uses direct global references instead of object access
For results see:
<example>w {}.$fromJSON(##class(Form.Info).getFormMetadataRuntime("Form.Test.Simple")).$toJSONFormat()</example>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String=""</FormalSpec>
<ReturnType>%Object</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	set formName = ..getFormParam(className, $$$formNameParam)
	
	set metadata = {}
	set metadata.name = formName
	set metadata.class = className
	set metadata.displayProperty = ..getFormParam(className, $$$displayProp)
	set metadata.objpermissions = ..getFormParam(className, "OBJPERMISSIONS")
	
	set metadata.fields = []
	
	set property=$$$comMemberNext(className,$$$cCLASSproperty,"")
	while property'="" {
		set internal = $$$comMemberKeyGet(className, $$$cCLASSproperty, property, $$$cPROPinternal)
		set displayName = ##class(Form.Property).getPropertyParam(className, property, $$$propDisplayNameParam)
		if ((internal '= $$$YES) && (displayName'="")) {
			set propertyMetaData = ##class(Form.Property).propertyToMetadataGLVN(className, property)
			do metadata.fields.$setAt($$$comMemberKeyGet(className, $$$cCLASSproperty, property, $$$cPROPsequencenumber), propertyMetaData)
		}
		set property=$$$comMemberNext(className,$$$cCLASSproperty,property)
	}
	
	/// we're moving from the end of array to the beginning 
	/// so we can delete null elements without affecting 
	/// the position of elements we're yet to check
	for i = metadata.fields.$size()-1:-1:0 {
		if metadata.fields.$getTypeOf(i)="unassigned" {
			 do metadata.fields.$remove(i)
		}
	}

	
	set callback = "onGenerateMetadata"
	if ##class(%Dictionary.CompiledMethod).IDKEYExists(className, callback) {
		set sc = $classmethod(className, callback, .metadata)
	}
	
	return metadata
]]></Implementation>
</Method>

<Method name="getFormParam">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>className:%String="",name:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$$$comMemberKeyGet(className,$$$cCLASSparameter,name,$$$cPARAMdefault)
]]></Implementation>
</Method>
</Class>
</Export>
