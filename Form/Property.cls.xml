<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Form.Property">
<Description>
Methods for form field === class property</Description>
<Abstract>1</Abstract>
<IncludeCode>Form</IncludeCode>
<TimeCreated>64090,75759.538379</TimeCreated>

<Method name="propertyToMetadata">
<Description>
Generate metadata for one field of a form</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>property:%Dictionary.PropertyDefinition</FormalSpec>
<ReturnType>%Object</ReturnType>
<Implementation><![CDATA[
	set metadata = {}
	set metadata.name = property.Name
	set metadata.type = property.Type
	set metadata.collection = property.Collection
	set metadata.displayName = property.Parameters.GetAt($$$propDisplayNameParam)
	
	set valueList = property.Parameters.GetAt("VALUELIST")
	set:valueList'="" metadata.valueList = ##class(Form.Util.Converter).stringToArray(valueList)
	
	set displayList = property.Parameters.GetAt("DISPLAYLIST")
	set:displayList'="" metadata.displayList = ##class(Form.Util.Converter).stringToArray(displayList)
	
	set metadata.required = property.Required
	set metadata.category = ..determineClassCategory(property.Type)
	return metadata
]]></Implementation>
</Method>

<Method name="propertyToMetadataGLVN">
<Description>
Get metadata for one field of a form. Equal to propertyToMetadata method, 
but uses direct global references instead of object access</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String="",name=""</FormalSpec>
<ReturnType>%Object</ReturnType>
<Implementation><![CDATA[
	set metadata = {}
	set metadata.name = name
	set metadata.type = ..getPropertyType(className, name)
	set metadata.collection = $$$comMemberKeyGet(className, $$$cCLASSproperty, name, $$$cPROPcollection)
	set metadata.displayName = ..getPropertyDisplayName(className, name)
	
	set valueList = ..getPropertyParam(className, name, "VALUELIST")
	set:valueList'="" metadata.valueList = ##class(Form.Util.Converter).stringToArray(valueList)
	
	set displayList = ..getPropertyParam(className, name, "DISPLAYLIST")
	set:displayList'="" metadata.displayList = ##class(Form.Util.Converter).stringToArray(displayList)

	set metadata.required = +$$$comMemberKeyGet(className, $$$cCLASSproperty, name, $$$cPROPrequired)	
	set metadata.category = ..determineClassCategory(metadata.type)
	return metadata
]]></Implementation>
</Method>

<Method name="determineClassCategory">
<Description>
Determine class type</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	return:##class(Form.Info).formExists(className) "form"
	return:className=$$$fileClass "file"
	return $$$getClassType(className)
]]></Implementation>
</Method>

<Method name="addClassProperty">
<Description>
Add class property
className - класс
name - имя свойства
type - класс свойства
collection - коллекция
displayName - отобразжаемое имя
required - обязательное свойство</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String="",name:%String,type:%String="%String",collection:%String(VALUELIST=",list,array")="",displayName:%String="",required:%Boolean=$$$NO</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	if (##class(%Dictionary.PropertyDefinition).IDKEYExists(className, name)) {
		return $$$ERROR($$$GeneralError, "Property " _ name _ " already exists")
	}
	
	set class = ##class(%Dictionary.ClassDefinition).%OpenId(className, ,.sc)
	return:$$$ISERR(sc) sc
	
	set property = ##class(%Dictionary.PropertyDefinition).%New()
	set property.Name = name
	set property.Type = type
	set property.Collection = collection
	set property.Required = required
	if (($get(displayName)'="") && ($$$comClassKeyGet(className,$$$cCLASSpropertyclass)[$$$propClass)) {
		set sc = property.Parameters.SetAt(displayName, $$$propDisplayNameParam)
		return:$$$ISERR(sc) sc
	}
	
	set sc = class.Properties.Insert(property)
	return:$$$ISERR(sc) sc
	
	set sc = class.%Save()
	return:$$$ISERR(sc) sc
	
	kill class	
	return ..compileClass(className)
]]></Implementation>
</Method>

<Method name="modifyClassProperty">
<Description>
Изменить свойство класса
className - класс
name - имя свойства
type - класс свойства
collection - коллекция
displayName - отобразжаемое имя
required - обязательное свойство</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String="",name:%String,type:%String="%String",collection:%String(VALUELIST=",list,array")="",displayName:%String="",required:%Boolean=$$$NO</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	set property = ##class(%Dictionary.PropertyDefinition).IDKEYOpen(className, name, , sc)
	return:$$$ISERR(sc) sc
	
	set property.Type = type
	set property.Collection = collection
	set property.Required = required
	if (($get(displayName)'="") && ($$$comClassKeyGet(className,$$$cCLASSpropertyclass)=$$$propClass)) {
		set sc = property.Parameters.SetAt(displayName, $$$propDisplayNameParam)
		return:$$$ISERR(sc) sc
	}

	set sc = property.%Save()
	return:$$$ISERR(sc) sc
	
	kill property	
	return ..compileClass(className)
]]></Implementation>
</Method>

<Method name="deleteClassProperty">
<Description>
Удалить свойство класса
className - класс
name - имя свойства</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String="",name:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	if ('##class(%Dictionary.PropertyDefinition).IDKEYExists(className, name)) {
		return $$$ERROR($$$GeneralError, "Property " _ name _ " does not exist")
	}
	
	set sc = ##class(%Dictionary.PropertyDefinition).IDKEYDelete(className, name)
	return:$$$ISERR(sc) sc
	
	return ..compileClass(className)
]]></Implementation>
</Method>

<Method name="compileClass">
<Description>
Скомпилировать класс, вернуть статус.
Не выводить ничего на устройство.</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>className:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[$system.OBJ.Compile(className, "cuks /checkuptodate=expandedonly /displaylog=0 /displayerror=0")
]]></Implementation>
</Method>

<Method name="getPropertyDisplayName">
<Description>
Получить DISPLAYNAME свойства
w ##class(Form.Property).getPropertyDisplayName("Form.Test.Simple", "text")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String="",name:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set displayName = ..getPropertyParam(className, name, $$$propDisplayNameParam)
	set:displayName="" displayName = name
	return displayName
]]></Implementation>
</Method>

<Method name="getPropertyType">
<Description>
Get property Type
w ##class(Form.Property).getPropertyType("Form.Test.Simple", "text")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String="",name:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set type = $$$comMemberKeyGet(className, $$$cCLASSproperty, name, $$$cPROPtype)
	set:type="" type = "%Library.String"
	return type
]]></Implementation>
</Method>

<Method name="getPropertyParam">
<Description>
Получить параметр param свойства
w ##class(Form.Property).getPropertyParam("Form.Test.Simple", "text", "VALUELIST")</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>className:%String="",name:%String="",param=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$$$comMemberArrayGet(className, $$$cCLASSproperty, name, $$$cPROPparameter, param)
]]></Implementation>
</Method>
</Class>
</Export>
