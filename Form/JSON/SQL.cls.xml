<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Form.JSON.SQL">
<IncludeCode>Form</IncludeCode>
<Super>%ZEN.Auxiliary.altJSONSQLProvider</Super>
<TimeCreated>64091,68899.667254</TimeCreated>

<Method name="WriteJSONFromSQL">
<ClassMethod>1</ClassMethod>
<FormalSpec>sql:%String,conditionClass=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	set provider = ..%New()
	set provider.maxRows = $$$MaxCacheInt
	set provider.%Format = $$$formatJSONSQL
	
	if ((##class(%Dictionary.CompiledClass).IDKEYExists(conditionClass)) && ($isobject($g(%request)))) {
		set sc = ..ParseWhere(%request.Get("filter"), conditionClass, .where)
		set sc = $$$ADDSC(sc, ..ParseOrderBy(%request.Get("orderby"), conditionClass, .orderBy))
		set sql = sql _ where _ orderBy
	} ElseIf (conditionClass'="") {
		set sc = $$$ERROR($$$GeneralError, "Condition class " _ conditionClass _ " does not exist")
	}
	return:$$$ISERR(sc) sc 
	
	set provider.sql = sql
	if $isobject($g(%request)) {
		set provider.pageSize = %request.Get("size", 25)
		set provider.currPage = %request.Get("page", 1)
	}
	
	set sc = provider.%DrawJSON()
	return sc
]]></Implementation>
</Method>

<Method name="ParseWhere">
<Description>
Parse where condition:
w ##class(Form.JSON.SQL).ParseWhere("Text eq Admin Text neq 1", "Form.TestForm", .out)
result: out=" WHERE Text='Admin' AND Text='1'"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>input,conditionClass,*condition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	kill condition
	set condition = ""
	set:$e(input,1)="(" input = $e(input,2,*-1)
	return:input="" sc
	
	set condList = $LFS(input," ")
	set listLength= $LL(condList)
	
	if listLength#3'=0 {
		return $$$ERROR($$$GeneralError, "Incorrect number of filter  arguments")
	}
	
	set condition = " WHERE "
	
	for i=1:3:listLength {
		set:i'=1 condition = condition _ " AND "
		set column = $lg(condList,i)
		set predicate = $lg(condList,i+1)
		set value = $TR($lg(condList,i+2),$c(9)," ") // replaces <TAB> in filter values eith whitespaces 
		set value = $TR(value,"'"";")
		
		if '##class(%Dictionary.CompiledProperty).IDKEYExists(conditionClass, column) {
			return $$$ERROR($$$GeneralError,"Filter column '" _column _ "' does not exist")
		}
		
		set sqlpredicate = ..TranslatePredicate(predicate)
		if sqlpredicate="" {
			return $$$ERROR($$$GeneralError,"Incorrect filter predicate")
		}
		#define sq(%str) "'" _ %str _ "'"
		set condition = condition _ column _ sqlpredicate _$$$sq(value)
	}
	return $$$OK
]]></Implementation>
</Method>

<Method name="TranslatePredicate">
<Description>
Translate predicate from js into sql</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>predicate=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	q:predicate="" ""
	q:predicate="neq" "!="
	q:predicate="eq" "="
	q:predicate="gte" ">="
	q:predicate="gt" ">"
	q:predicate="lte" "<="
	q:predicate="lt" "<"
	q:predicate="startswith" "%STARTSWITH"
	q:predicate="contains" "["
	q:predicate="doesnotcontain" "'["
	q ""
]]></Implementation>
</Method>

<Method name="ParseOrderBy">
<Description>
w ##class(Form.JSON.SQL).ParseOrderBy("Value desc", "Form.TestRef")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>input,class,*condition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	kill condition
	
	// If input is an empty string use form FORMORDERBY parameter
	set:input="" input = $parameter(class, $$$orderByParam)
	set condition = ""
	return:input="" sc
	
	set descPos = $f(input, " desc")
	if descPos'=0 {
		set column = $e(input, 1, descPos-6) // 6 = $l("+desc")+1
	} else {
		set column=input
	}
	
	if ##class(%Dictionary.CompiledProperty).IDKEYExists(class, column) {
		/// nothing to do here
	} elseif $isValidNum($normalize(column, 0)) {
		set column = $normalize(column, 0)
	} else {
		set sc = $$$ERROR($$$GeneralError, "Sorting column '" _ column _ "' does not exist")
		set column = "" // invalidate SQL jic
	}
	
	set condition = " ORDER BY " _ column _ $s(descPos'=0:" DESC",1:"")
	return sc
]]></Implementation>
</Method>

<Method name="%DrawJSON">
<Description>
Draw JSON output.</Description>
<Internal>1</Internal>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..contentType = "array"
	// override base method to get information from SQL statement
	Set tSC = $$$OK
	Try {
		#; convert parameters to local array
		Set key = ..parameters.Next("")
		While (key'="") {
			Set value = ..parameters.GetAt(key).value
			Set tParms(key) = $$$ZENVAL(value)
			Set key = ..parameters.Next(key)
		}
		Set tOrigSQL = ..sql
		Set tSQL = ..sql

		If (..OnGetSQL '= "") {
			Set tSC = ..%OnGetSQL(.tParms,.tSQL)
			If $$$ISERR(tSC) {
				Write "null"
				Quit
			}
			Set ..sql = tSQL
		}

		Set tInfo = ##class(%ZEN.Auxiliary.QueryInfo).%New()
		Merge tInfo.parms=tParms
		
		#Dim tRS As %Library.ResultSet
		Set tRS = ..%CreateResultSet(.tSC,tInfo)
		If $$$ISERR(tSC)||'$IsObject(tRS) {
			Write "null"
			Quit
		}

		// find number and name of columns
		Kill tColInfo
		If tRS.%IsA("%Library.ResultSet") {
			Set tCols = tRS.GetColumnCount()
			For c = 1:1:tCols { 
				Set tColInfo(c,"name") = tRS.GetColumnHeader(c)
			}
		}
		Else {
			Set tCols = tRS.%ResultColumnCount
			For c = 1:1:tCols {
				Set tColInfo(c,"name") = tRS.%Metadata.columns.GetAt(c).label
			}
		}
		Set ..sql = tOrigSQL

 		Set aet = ##class(%AbstractObject).$fromJSON("{"""_..arrayName_""":[]}")
 		Set arrayNode = aet.$get(..arrayName)
 	
 		// FORMS - пагинация
		Set tStartRow = ..pageSize * (..currPage - 1)
		Set tEndRow = tStartRow + ..pageSize
		// END - FORMS - пагинация

		// fetch and emit JSON
		// n.b. this should be pushed into the result set itself
		Set tRow = 0
		While (tRS.%Next(.tSC) && ((..maxRows = 0) || (tRow < ..maxRows)) && (tRow < tEndRow)) { // Последнее условие - FORMS - пагинация
			Quit:$$$ISERR(tSC)
			Set tRow = tRow + 1
			
			// FORMS - пагинация
			CONTINUE:(tRow<=tStartRow)
			// END - FORMS - пагинация
			
			Set node = ##class(%Object).$new()
			For c = 1:1:tCols {
				Set tVal = tRS.%GetData(c)
				If ($IsValidNum(tVal)) {
					Do node.$set($Get(tColInfo(c,"name")),$Num(tVal),"number")
				}
				Else {
					Do node.$set($Get(tColInfo(c,"name")),tVal)
				}
			}
			Do arrayNode.$push(node)
		}
		
		// FORMS - количество результатов
		While tRS.%Next() {}
		Set aet.total=tRS.%ROWCOUNT
		// END - FORMS - количество результатов
				
		Write aet.$toJSON()
	}
	Catch(ex) {
		Write "null"
		Set tSC = ex.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
