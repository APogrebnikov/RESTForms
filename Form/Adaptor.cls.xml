<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Form.Adaptor">
<Description>
Base form adaptor class, all forms must inherit from this class</Description>
<Abstract>1</Abstract>
<CompileAfter>Form.Info</CompileAfter>
<IncludeCode>Form</IncludeCode>
<PropertyClass>Form.Field</PropertyClass>
<Super>Form.Security</Super>
<TimeCreated>64090,75147.034342</TimeCreated>
<DependsOn>Form.Info</DependsOn>

<Parameter name="FORMNAME">
<Description>
Form name, not a global key so it can be anything
Set to empty string (like here) to not have a class as a form </Description>
<Type>%String</Type>
</Parameter>

<Parameter name="OBJPERMISSIONS">
<Description>
Default permissions
Objects of this form can be Created, Read, Updated and Deleted
Redefine this parameter to change permissions for everyone
Redefine checkPermission method (see Form.Security) for this class 
to add custom security based on user/roles/etc.</Description>
<Type>%String</Type>
<Default>CRUD</Default>
</Parameter>

<Parameter name="DISPLAYPROPERTY">
<Description>
Property used for basic information about the object
By default getObjectDisplayName method gets its value from it</Description>
<Type>%String</Type>
<Default>displayName</Default>
</Parameter>

<Method name="generateMetadata">
<Description><![CDATA[
Generate form metadata
For results see:
<example>w {}.$fromJSON(^form.forms("Form.TestForm","metadata")).$toJSONFormat()</example>]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<GenerateAfter>onFormCompile</GenerateAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Include Form

	#dim sc As %Status = $$$OK
	set className = %compiledclass.Name
	set formName = %parameter($$$formNameParam)
	return:((className="Form.Adaptor")||(formName="")) sc

	
	set metadata = {}
	set metadata.name = formName
	set metadata.class = className
	set metadata.fields = []
	
	for i = 1:1:%compiledclass.Properties.Count() {
		#dim property As %Dictionary.CompiledProperty
		set property = %compiledclass.Properties.GetAt(i)
		set propertyName = property.Name
		CONTINUE:((propertyName="%%OID") || (propertyName="%Concurrency")) 
		
		/// Only properties with set DISPLAYNAME param are included in metainformation
		if (property.Parameters.GetAt($$$propDisplayNameParam)'="") {
			set propertyMetaData = ##class(Form.Property).propertyToMetadata(property)
			do metadata.fields.$push(propertyMetaData)
		}
	}
	
	set $$$formGlobal(className) = formName
	set $$$formGlobal(className, $$$metadata) = metadata.$toJSON()
	
	return sc
]]></Implementation>
</Method>

<Method name="toJSON">
<Description>
Выводит объект Id в формате JSON на текущее устройство
Переопределите этот метод для конкретной формы, если есть какие-то особенности её обработки
Возможно: заменить метод на генератор, который будет генерить код для формы
Подразумевается, что форма хранимая</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	set obj = ..%OpenId(id,,.sc)
	return:$$$ISERR(sc) sc
	return ##class(Form.JSON.OBJ).%ObjectToJSON(obj,,,$$$formatJSON)
]]></Implementation>
</Method>

<Method name="updateIdFromObject">
<Description>
Открывает объект по Id и перезаписывает все его свойства 
соответствующими значениями из object 
После чего сохраняет объект</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer="",object=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	return:'$isObject(object) $$$ERROR($$$GeneralError, "Pass an object as a second argument to updateIdFromObject from " _ $className())
	set obj = ..%OpenId(id,,.sc)
	return:$$$ISERR(sc) sc
	set sc = obj.updateFromObject(object)
	return:$$$ISERR(sc) sc
	set sc = obj.%Save()
	return sc
]]></Implementation>
</Method>

<Method name="updateFromObject">
<Description>
Устанавливает все поля текущего объекта из переданного объекта
Это может быть динамический объект или объект того же класса</Description>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>object</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	for i = 1:1:%class.Properties.Count() {
        set prop = %class.Properties.GetAt(i)
        if prop.Internal || prop.Calculated || prop.ReadOnly || prop.Private || prop.Identity || prop.MultiDimensional continue
        
        // Вопросы:
        // 1. Что с объектами - в принципе
        // 2. Что со списками
        // 3. Пустые поля - пропускать или что делать? 
        // 4. Что с потоками
        do %code.WriteLine(" set .." _ prop.Name _ " = object." _ prop.Name)
    }
    do %code.WriteLine(" Quit $$$OK")
]]></Implementation>
</Method>

<Method name="getObjectInfo">
<Description>
Get basic information about one object</Description>
<Abstract>1</Abstract>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer</FormalSpec>
<ReturnType>%Object</ReturnType>
<Implementation><![CDATA[
	set item = {}
	set item."_id" = id
	set item.displayName = ..getObjectDisplayName(id)
	return item
]]></Implementation>
</Method>

<Method name="getObjectsInfo">
<Description><![CDATA[
Get basic information about several form objects.<br>
<var>list</var> - contains objects ids (not oids)]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>list:%ListOfDataTypes</FormalSpec>
<ReturnType>%Array</ReturnType>
<Implementation><![CDATA[
	set objectsList = []
	for i=1:1:list.Count() {
		set id = list.GetAt(i)
		set item = ..getObjectInfo(id)
		do objectsList.$push(item)
	}
	return objectsList
]]></Implementation>
</Method>

<Method name="getObjectDisplayName">
<Description>
Get vale of a property specified in DISPLAYPROPERTY parameter.
If it is stored, then GetStored value would be taken
If it is calculated, then the object would be opened and the value would be calculated
Redefine to implement your custom logic</Description>
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>id:%Integer</FormalSpec>
<GenerateAfter>onFormCompile</GenerateAfter>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#Include Form
	#dim sc As %Status = $$$OK
	set className = %compiledclass.Name
	return:className="Form.Adaptor" sc
	
	set propName = %parameter($$$displayProp)
	set key = %compiledclass.Properties.FindObjectId(className _ "||" _ propName)
	
	#dim prop As %Dictionary.CompiledProperty
	set prop = %compiledclass.Properties.GetAt(key)
	
	if ((prop.Calculated = $$$YES) || (prop.Transient = $$$YES)) {
		do %code.WriteLine(" set obj = ..%OpenId(id)")
		do %code.WriteLine(" return obj." _ propName)
	} else {
		do %code.WriteLine(" return .." _ propName _ "GetStored(id)")
	}
		
	quit sc
]]></Implementation>
</Method>
</Class>
</Export>
